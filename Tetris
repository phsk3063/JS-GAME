html{
    height: 100%;
    background: black;
}
body {
	padding: 10px;
	margin: 0;
	font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell,
		Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
	line-height: 1.6;
	font-size: 18px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.container{
    display: flex;
}

.grid {
    width: 200px;
    height: 400px;
html{
    height: 100%;
    background: black;
}
body {
	padding: 10px;
	margin: 0;
	font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell,
		Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
	line-height: 1.6;
	font-size: 18px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.container{
    display: flex;
}

.grid {
    width: 200px;
    height: 400px;
    background-color: black;
    display: flex;
    flex-wrap: wrap;
    border: 3px solid green;
}

.grid div{
    width: 20px;
    height: 20px;
}

.tetromino{
    background-color: green;
}

.mini-grid {
    margin-left: 50px;
    height: 80px;
    width: 80px;
    display: flex;
    flex-wrap: wrap;
    background-color: #000000;
    border: 3px solid green;
}

.mini-grid div{
    height: 20px;
    width: 20px;
}

#start-button {
    display: inline-block;
    padding: 10px 20px;
    background-color: #e67e22; 
    color: #fff;
    font-size: 16px;
    border: none;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    border-radius: 5px;
    margin-bottom: 50px;
  }
  
#start-button:hover {
    background-color: red;
}

h3 {
    font-size: 24px;
    color: white;
    text-align: center;
}
  
h1 {
    margin: 0px;
    font-size: 36px; 
    color: #fff176; 
    text-align: center;
    margin-top: 20px;
}

#game-over-overlay {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    text-align: center;
    z-index: 999;
  }
  
  #game-over-message {
    font-size: 36px;
    color: #fff; 
    margin-top: 30vh;
  }ï¿¼Enter    background-color: black;
    display: flex;
    flex-wrap: wrap;
    border: 3px solid green;
}

.grid div{
    width: 20px;
    height: 20px;
}

.tetromino{
    background-color: green;
}

.mini-grid {
    margin-left: 50px;
    height: 80px;
    width: 80px;
    display: flex;
    flex-wrap: wrap;
    background-color: #000000;
    border: 3px solid green;
}

.mini-grid div{
ight: 20px;
    width: 20px;
}

#start-button {
    display: inline-block;
    padding: 10px 20px;
    background-color: #e67e22; 
    color: #fff;
    font-size: 16px;
    border: none;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    border-radius: 5px;
    margin-bottom: 50px;
  }
  
#start-button:hover {
    background-color: red;
}

h3 {
    font-size: 24px;
    color: white;
    text-align: center;



document.addEventListener('DOMContentLoaded', () => {
	const grid = document.querySelector('.grid')
	let squares = Array.from(document.querySelectorAll('.grid div'))
	const scoreDisplay = document.getElementById('score')
	const startbtn = document.querySelector('#start-button')
	const width = 10
	let nextRandom = 0
	let timerId
	let score = 0
	const gameOverOverlay = document.getElementById('game-over-overlay')
	gameOverOverlay.style.display = 'none'
	const restartButton = document.getElementById('restart-button')
	restartButton.addEventListener('click', () => {
		window.location.reload()
	})
	var time = 1000
	const lTetromino = [
		[1, width + 1, width * 2 + 1, 2],
		[width, width + 1, width + 2, width * 2 + 2],
		[1, width + 1, width * 2 + 1, width * 2],
		[width, width * 2, width * 2 + 1, width * 2 + 2]
	]

	const zTetromino = [
		[0, width, width + 1, width * 2 + 1],
		[width + 1, width + 2, width * 2, width * 2 + 1],
		[0, width, width + 1, width * 2 + 1],
		[width + 1, width + 2, width * 2, width * 2 + 1]
	]

	const tTetromino = [
		[1, width, width + 1, width + 2],
		[1, width + 1, width + 2, width * 2 + 1],
		[width, width + 1, width + 2, width * 2 + 1],
		[1, width, width + 1, width * 2 + 1]
	]

	const oTetromino = [
		[0, 1, width, width + 1],
		[0, 1, width, width + 1],
		[0, 1, width, width + 1],
		[0, 1, width, width + 1]
	]

	const iTetromino = [
		[1, width + 1, width * 2 + 1, width * 3 + 1],
		[width, width + 1, width + 2, width + 3],
		[1, width + 1, width * 2 + 1, width * 3 + 1],
		[width, width + 1, width + 2, width + 3]
	]

	const theTetrominos = [
		lTetromino,
		zTetromino,
		tTetromino,
		oTetromino,
		iTetromino
	]

	let currPos = 4
	let currRotation = 0
	let random = Math.floor(Math.random() * theTetrominos.length)
	let curr = theTetrominos[random][currRotation]

	function draw() {
		curr.forEach((index) => {
			squares[currPos + index].classList.add('tetromino')
		})
	}

	function undraw() {
		curr.forEach((index) => {
			squares[currPos + index].classList.remove('tetromino')
		})
	}

	function control(e) {
		if (e.keyCode === 37) {
			moveLeft()
		} else if (e.keyCode === 38) {
			rotate()
		} else if (e.keyCode === 39) {
			moveRight()
		} else if (e.keyCode === 40) {
			moveDown()
		}
	}
	document.addEventListener('keyup', control)

	function freeze() {
		if (
			curr.some((index) =>
				squares[currPos + index + width].classList.contains('taken')
			)
		) {
			curr.forEach((index) => {
				squares[currPos + index].classList.add('taken')
			})
			random = nextRandom
			nextRandom = Math.floor(Math.random() * theTetrominos.length)
			curr = theTetrominos[random][currRotation]
			currPos = 4
			draw()
			displayShape()
			addScore()
			gameOver()
		}
	}

	function moveDown() {
		undraw()
		currPos += width
		draw()
		freeze()
	}

	function moveLeft() {
		undraw()
		const isLeftEdge = curr.some((index) => (currPos + index) % width === 0)
		if (!isLeftEdge) currPos -= 1
		if (
			curr.forEach((index) =>
				squares[currPos + index].classList.contains('taken')
			)
		) {
			currPos += 1
		}
		draw()
	}

	function moveRight() {
		undraw()
		const isLeftEdge = curr.some(
			(index) => (currPos + index) % width === width - 1
		)
		if (!isLeftEdge) currPos += 1
		if (
			curr.forEach((index) =>
				squares[currPos + index].classList.contains('taken')
			)
		) {
			currPos -= 1
		}
		draw()
	}

	function rotate() {
		undraw()
		currRotation = (currRotation + 1) % 4
		curr = theTetrominos[random][currRotation]
		draw()
	}
	draw()

	const displaySquares = document.querySelectorAll('.mini-grid div')
	const displaywidth = 4
	let displayIndex = 0

	const upNextTetrominos = [
		[1, displaywidth + 1, displaywidth * 2 + 1, 2],
		[0, displaywidth, displaywidth + 1, displaywidth * 2 + 1],
		[1, displaywidth, displaywidth + 1, displaywidth + 2],
		[0, 1, displaywidth, displaywidth + 1],
		[1, displaywidth + 1, displaywidth * 2 + 1, displaywidth * 3 + 1]
	]

	function displayShape() {
		displaySquares.forEach((square) => {
			square.classList.remove('tetromino')
		})
		upNextTetrominos[nextRandom].forEach((index) => {
			displaySquares[displayIndex + index].classList.add('tetromino')
		})
	}

	startbtn.addEventListener('click', () => {
		if (timerId) {
			clearInterval(timerId)
			timerId = null
		} else {
			draw()
			timerId = setInterval(moveDown, time)
			nextRandom = Math.floor(Math.random() * theTetrominos.length)
			displayShape()
		}
	})

	function addScore() {
		for (let i = 0; i < 199; i += width) {
			const row = [
				i,
				i + 1,
				i + 2,
				i + 3,
				i + 4,
				i + 5,
				i + 6,
				i + 7,
				i + 8,
				i + 9
			]

			if (
				row.every((index) => squares[index].classList.contains('taken'))
			) {
				score += 10
				if (time > 200) {
					time -= 100
					timerId = setInterval(moveDown, time)
				}
				console.log(score, time)
				scoreDisplay.innerHTML = score
				row.forEach((index) => {
					squares[index].classList.remove('taken')
					squares[index].classList.remove('tetromino')
				})
				const squaresRemoved = squares.splice(i, width)
				squares = squaresRemoved.concat(squares)
				squares.forEach((cell) => grid.appendChild(cell))
			}
		}
	}

	function gameOver() {
		if (
			curr.some((index) =>
				squares[currPos + index].classList.contains('taken')
			)
		) {
			scoreDisplay.innerHTML = 'end'
			document.getElementById('final-score').innerText = score
			gameOverOverlay.style.display = 'block'
			clearInterval(timerId)
		}
	}
})
